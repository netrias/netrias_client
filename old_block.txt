    payload = build_harmonize_payload(csv_path, manifest)

    try:
        submission = await submit_harmonize_job(
            base_url=settings.api_url,
            api_key=settings.api_key,
            payload_gz=payload,
            timeout=settings.timeout,
        )
    except httpx.TimeoutException as exc:
        _logger.error("harmonize submit timeout: file=%s err=%s", csv_path, exc)
        return HarmonizationResult(file_path=dest, status="timeout", description="request timed out")
    except httpx.HTTPError as exc:
        _logger.error("harmonize submit transport error: file=%s err=%s", csv_path, exc)
        raise NetriasAPIUnavailable(f"transport error: {exc}") from exc

    if submission.status_code >= 400:
        message, payload_for_log = _error_description(
            status=submission.status_code,
            body_text=submission.text,
            default="harmonization submit failed",
        )
        _logger.error(
            "harmonize submit failed: file=%s status=%s body=%s",
            csv_path,
            submission.status_code,
            _formatted_body(payload_for_log),
        )
        return HarmonizationResult(file_path=dest, status="failed", description=message)

    job_payload = _json_mapping(submission)
    job_id = _string_field(job_payload, "jobId")
    if not job_id:
        _logger.error("harmonize submit response missing jobId: file=%s body=%s", csv_path, job_payload)
        return HarmonizationResult(
            file_path=dest,
            status="failed",
            description="harmonization job response missing jobId",
        )

    try:
        final_payload = await _await_job_completion(
            base_url=settings.api_url,
            api_key=settings.api_key,
            job_id=job_id,
            timeout=settings.timeout,
        )
    except HarmonizationJobError as exc:
        _logger.error("harmonize job failed: file=%s err=%s", csv_path, exc)
        return HarmonizationResult(file_path=dest, status="failed", description=str(exc))

    final_url = _string_field(final_payload, "finalUrl")
    if not final_url:
        _logger.error("harmonize job missing finalUrl: file=%s payload=%s", csv_path, final_payload)
        return HarmonizationResult(
            file_path=dest,
            status="failed",
            description="harmonization job completed without a download URL",
        )

    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(settings.timeout)) as client:
            async with client.stream("GET", final_url) as response:
                if 200 <= response.status_code < 300:
                    await stream_download_to_file(response, dest)
                else:
                    body_bytes = await response.aread()
                    description = _download_error_message(response.status_code, body_bytes)
                    _logger.error(
                        "harmonize download failed: file=%s status=%s body=%s",
                        csv_path,
                        response.status_code,
                        _formatted_body(_payload_for_logging(body_bytes)),
                    )
                    return HarmonizationResult(file_path=dest, status="failed", description=description)
    except httpx.TimeoutException as exc:
        _logger.error("harmonize download timeout: file=%s err=%s", csv_path, exc)
        return HarmonizationResult(file_path=dest, status="timeout", description="download timed out")
    except httpx.HTTPError as exc:
        _logger.error("harmonize download transport error: file=%s err=%s", csv_path, exc)
        raise NetriasAPIUnavailable(f"transport error: {exc}") from exc

